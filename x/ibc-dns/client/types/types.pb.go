// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/dns/client/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/datachainlab/cosmos-sdk-interchain-dns/x/ibc-dns/common/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterDomain struct {
	// the port on which the packet will be sent
	SourcePort string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	// the channel by which the packet will be sent
	SourceChannel string                                        `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	Domain        string                                        `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Sender        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgRegisterDomain) Reset()         { *m = MsgRegisterDomain{} }
func (m *MsgRegisterDomain) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDomain) ProtoMessage()    {}
func (*MsgRegisterDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd45cdcc41e691b0, []int{0}
}
func (m *MsgRegisterDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDomain.Merge(m, src)
}
func (m *MsgRegisterDomain) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDomain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDomain proto.InternalMessageInfo

type MsgDomainAssociationCreate struct {
	Sender    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	DnsId     types.LocalDNSID                              `protobuf:"bytes,2,opt,name=dns_id,json=dnsId,proto3" json:"dns_id"`
	SrcClient types.ClientDomain                            `protobuf:"bytes,3,opt,name=src_client,json=srcClient,proto3" json:"src_client"`
	DstClient types.ClientDomain                            `protobuf:"bytes,4,opt,name=dst_client,json=dstClient,proto3" json:"dst_client"`
}

func (m *MsgDomainAssociationCreate) Reset()         { *m = MsgDomainAssociationCreate{} }
func (m *MsgDomainAssociationCreate) String() string { return proto.CompactTextString(m) }
func (*MsgDomainAssociationCreate) ProtoMessage()    {}
func (*MsgDomainAssociationCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd45cdcc41e691b0, []int{1}
}
func (m *MsgDomainAssociationCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDomainAssociationCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDomainAssociationCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDomainAssociationCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDomainAssociationCreate.Merge(m, src)
}
func (m *MsgDomainAssociationCreate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDomainAssociationCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDomainAssociationCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDomainAssociationCreate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterDomain)(nil), "ibc.dns.client.MsgRegisterDomain")
	proto.RegisterType((*MsgDomainAssociationCreate)(nil), "ibc.dns.client.MsgDomainAssociationCreate")
}

func init() { proto.RegisterFile("ibc/dns/client/types.proto", fileDescriptor_cd45cdcc41e691b0) }

var fileDescriptor_cd45cdcc41e691b0 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xbd, 0x6e, 0xd4, 0x40,
	0x10, 0xb6, 0xc3, 0x71, 0x52, 0xf6, 0x20, 0x12, 0x16, 0x44, 0x87, 0x85, 0xec, 0xc8, 0x55, 0x1a,
	0xdb, 0x22, 0x14, 0x91, 0x52, 0x71, 0x3f, 0x05, 0x27, 0x11, 0x84, 0x4c, 0x47, 0x73, 0x5a, 0xef,
	0xae, 0x7c, 0x2b, 0xec, 0x9d, 0xd3, 0xce, 0x46, 0x22, 0x6f, 0x40, 0xc9, 0x23, 0xf0, 0x00, 0x3c,
	0x48, 0xca, 0x94, 0x54, 0x27, 0x74, 0xf7, 0x06, 0x69, 0x90, 0xa8, 0x90, 0x77, 0x0d, 0x98, 0x54,
	0x48, 0xa9, 0x76, 0x67, 0xbe, 0xfd, 0xbe, 0xd9, 0xf9, 0x66, 0x48, 0x28, 0x4b, 0x96, 0x73, 0x85,
	0x39, 0xab, 0xa5, 0x50, 0x26, 0x37, 0x97, 0x6b, 0x81, 0xd9, 0x5a, 0x83, 0x81, 0xe0, 0x40, 0x96,
	0x2c, 0xe3, 0x0a, 0x33, 0x87, 0x85, 0x8f, 0x2b, 0xa8, 0xc0, 0x42, 0x79, 0x7b, 0x73, 0xaf, 0xc2,
	0xbf, 0x0a, 0xd0, 0x34, 0xa0, 0xfa, 0x0a, 0xc9, 0x0f, 0x9f, 0x3c, 0x3a, 0xc7, 0xaa, 0x10, 0x95,
	0x44, 0x23, 0xf4, 0x1c, 0x1a, 0x2a, 0x55, 0x70, 0x4a, 0x46, 0x08, 0x17, 0x9a, 0x89, 0xe5, 0x1a,
	0xb4, 0x19, 0xfb, 0x47, 0xfe, 0xf1, 0xfe, 0xf4, 0xf0, 0x66, 0x13, 0x07, 0x97, 0xb4, 0xa9, 0xcf,
	0x92, 0x1e, 0x98, 0x14, 0xc4, 0x45, 0x6f, 0x41, 0x9b, 0xe0, 0x25, 0x39, 0xe8, 0x30, 0xb6, 0xa2,
	0x4a, 0x89, 0x7a, 0xbc, 0x67, 0xb9, 0x4f, 0x6f, 0x36, 0xf1, 0x93, 0x7f, 0xb8, 0x1d, 0x9e, 0x14,
	0x0f, 0x5d, 0x62, 0xe6, 0xe2, 0xe0, 0x90, 0x0c, 0xb9, 0xfd, 0xc4, 0xf8, 0x5e, 0xcb, 0x2c, 0xba,
	0x28, 0x58, 0x90, 0x21, 0x0a, 0xc5, 0x85, 0x1e, 0x0f, 0x8e, 0xfc, 0xe3, 0x07, 0xd3, 0xe7, 0x3f,
	0x37, 0x71, 0x5a, 0x49, 0xb3, 0xba, 0x28, 0x33, 0x06, 0x4d, 0xce, 0x00, 0x1b, 0xc0, 0xee, 0x48,
	0x91, 0x7f, 0xe8, 0xda, 0x9c, 0x30, 0x36, 0xe1, 0x5c, 0x0b, 0xc4, 0xa2, 0x13, 0x38, 0x1b, 0x7c,
	0xfa, 0x12, 0x7b, 0xc9, 0xd7, 0x3d, 0x12, 0x9e, 0x63, 0xe5, 0x3a, 0x9e, 0x20, 0x02, 0x93, 0xd4,
	0x48, 0x50, 0x33, 0x2d, 0xa8, 0x11, 0xbd, 0x7a, 0xfe, 0x1d, 0xeb, 0x05, 0xa7, 0x64, 0xc8, 0x15,
	0x2e, 0x25, 0xb7, 0x66, 0x8c, 0x4e, 0xc2, 0xec, 0xcf, 0xd8, 0xec, 0x40, 0xb2, 0xd7, 0xc0, 0x68,
	0x3d, 0x7f, 0xf3, 0x6e, 0x31, 0x9f, 0x0e, 0xae, 0x36, 0xb1, 0x57, 0xdc, 0xe7, 0x0a, 0x17, 0x3c,
	0x98, 0x10, 0x82, 0x9a, 0x2d, 0xdd, 0x70, 0xad, 0x1f, 0xa3, 0x93, 0x67, 0xb7, 0xc9, 0x33, 0x8b,
	0xba, 0x36, 0x3a, 0xfa, 0x3e, 0x6a, 0xe6, 0xd2, 0xad, 0x04, 0x47, 0xf3, 0x5b, 0x62, 0xf0, 0xff,
	0x12, 0x1c, 0x8d, 0x4b, 0x3b, 0xbb, 0xa6, 0xe5, 0xd5, 0x36, 0xf2, 0xaf, 0xb7, 0x91, 0xff, 0x7d,
	0x1b, 0xf9, 0x9f, 0x77, 0x91, 0x77, 0xbd, 0x8b, 0xbc, 0x6f, 0xbb, 0xc8, 0x7b, 0xff, 0xaa, 0xe7,
	0x0a, 0xa7, 0x86, 0xb2, 0x15, 0x95, 0xaa, 0xa6, 0x65, 0xcf, 0x9b, 0x54, 0x2a, 0x23, 0xb4, 0x05,
	0xd2, 0x76, 0x11, 0x3f, 0xe6, 0xb2, 0x64, 0xe9, 0xed, 0xa5, 0x2e, 0x87, 0x76, 0x27, 0x5f, 0xfc,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x54, 0x60, 0x3b, 0xf3, 0x02, 0x00, 0x00,
}

func (m *MsgRegisterDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDomainAssociationCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDomainAssociationCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDomainAssociationCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DstClient.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SrcClient.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.DnsId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgDomainAssociationCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.DnsId.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.SrcClient.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DstClient.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDomainAssociationCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDomainAssociationCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDomainAssociationCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DnsId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SrcClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DstClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
