// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/dns/server/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/datachainlab/cosmos-sdk-interchain-dns/x/ibc-dns/common/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryDomainsRequest struct {
}

func (m *QueryDomainsRequest) Reset()         { *m = QueryDomainsRequest{} }
func (m *QueryDomainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDomainsRequest) ProtoMessage()    {}
func (*QueryDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7de431c92afc79, []int{0}
}
func (m *QueryDomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainsRequest.Merge(m, src)
}
func (m *QueryDomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainsRequest proto.InternalMessageInfo

type QueryDomainsResponse struct {
	Domains []DomainInfo `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains"`
}

func (m *QueryDomainsResponse) Reset()         { *m = QueryDomainsResponse{} }
func (m *QueryDomainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDomainsResponse) ProtoMessage()    {}
func (*QueryDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7de431c92afc79, []int{1}
}
func (m *QueryDomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainsResponse.Merge(m, src)
}
func (m *QueryDomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainsResponse proto.InternalMessageInfo

type DomainInfo struct {
	Name     string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metadata []byte             `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DnsId    types.LocalDNSID   `protobuf:"bytes,3,opt,name=dns_id,json=dnsId,proto3" json:"dns_id"`
	Channel  types.LocalChannel `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel"`
}

func (m *DomainInfo) Reset()         { *m = DomainInfo{} }
func (m *DomainInfo) String() string { return proto.CompactTextString(m) }
func (*DomainInfo) ProtoMessage()    {}
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7de431c92afc79, []int{2}
}
func (m *DomainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainInfo.Merge(m, src)
}
func (m *DomainInfo) XXX_Size() int {
	return m.Size()
}
func (m *DomainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DomainInfo proto.InternalMessageInfo

type QueryDomainRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryDomainRequest) Reset()         { *m = QueryDomainRequest{} }
func (m *QueryDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDomainRequest) ProtoMessage()    {}
func (*QueryDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7de431c92afc79, []int{3}
}
func (m *QueryDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainRequest.Merge(m, src)
}
func (m *QueryDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainRequest proto.InternalMessageInfo

type QueryDomainResponse struct {
	Domain DomainInfo `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain"`
}

func (m *QueryDomainResponse) Reset()         { *m = QueryDomainResponse{} }
func (m *QueryDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDomainResponse) ProtoMessage()    {}
func (*QueryDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f7de431c92afc79, []int{4}
}
func (m *QueryDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainResponse.Merge(m, src)
}
func (m *QueryDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryDomainsRequest)(nil), "ibc.dns.server.QueryDomainsRequest")
	proto.RegisterType((*QueryDomainsResponse)(nil), "ibc.dns.server.QueryDomainsResponse")
	proto.RegisterType((*DomainInfo)(nil), "ibc.dns.server.DomainInfo")
	proto.RegisterType((*QueryDomainRequest)(nil), "ibc.dns.server.QueryDomainRequest")
	proto.RegisterType((*QueryDomainResponse)(nil), "ibc.dns.server.QueryDomainResponse")
}

func init() { proto.RegisterFile("ibc/dns/server/querier.proto", fileDescriptor_3f7de431c92afc79) }

var fileDescriptor_3f7de431c92afc79 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0x9e, 0xec, 0x76, 0x5b, 0x8d, 0xe2, 0x21, 0xae, 0x30, 0x0c, 0x65, 0x76, 0xa8, 0x1e, 0x7a,
	0xe9, 0x84, 0x5d, 0x0f, 0xca, 0xe2, 0x69, 0xed, 0xc1, 0x82, 0x08, 0x56, 0x04, 0xf1, 0xb2, 0x64,
	0x26, 0x71, 0x1a, 0xec, 0xe4, 0x75, 0x27, 0x69, 0x71, 0x4f, 0x82, 0x27, 0x8f, 0x82, 0x7f, 0xc0,
	0xbf, 0xe1, 0x3f, 0xd8, 0xe3, 0x82, 0x17, 0x4f, 0x22, 0xad, 0x3f, 0x44, 0x26, 0x49, 0xd7, 0x8e,
	0x14, 0xf1, 0x96, 0xc9, 0xf7, 0x7d, 0xef, 0xbd, 0x7c, 0xdf, 0x1b, 0xdc, 0x95, 0x59, 0x4e, 0xb9,
	0xd2, 0x54, 0x8b, 0x6a, 0x21, 0x2a, 0x7a, 0x36, 0x17, 0x95, 0x14, 0x55, 0x3a, 0xab, 0xc0, 0x00,
	0xb9, 0x25, 0xb3, 0x3c, 0xe5, 0x4a, 0xa7, 0x0e, 0x8d, 0xf6, 0x0b, 0x28, 0xc0, 0x42, 0xb4, 0x3e,
	0x39, 0x56, 0xd4, 0x2d, 0x00, 0x8a, 0xa9, 0xa0, 0x6c, 0x26, 0x29, 0x53, 0x0a, 0x0c, 0x33, 0x12,
	0x94, 0xf6, 0x68, 0xb4, 0xee, 0x90, 0x43, 0x59, 0x82, 0xa2, 0xe6, 0x7c, 0x26, 0x3c, 0xd6, 0xbb,
	0x83, 0x6f, 0x3f, 0x9f, 0x8b, 0xea, 0x7c, 0x08, 0x25, 0x93, 0x4a, 0x8f, 0xc5, 0xd9, 0x5c, 0x68,
	0xd3, 0x7b, 0x85, 0xf7, 0x9b, 0xd7, 0x7a, 0x06, 0x4a, 0x0b, 0x72, 0x8c, 0x3b, 0xdc, 0x5d, 0x85,
	0x28, 0xd9, 0xed, 0xdf, 0x38, 0x8a, 0xd2, 0xe6, 0x80, 0xa9, 0x53, 0x8c, 0xd4, 0x1b, 0x38, 0x69,
	0x5d, 0xfc, 0x38, 0x08, 0xc6, 0x6b, 0xc1, 0x71, 0xeb, 0xe3, 0x97, 0x83, 0xa0, 0xf7, 0x15, 0x61,
	0xfc, 0x87, 0x43, 0x08, 0x6e, 0x29, 0x56, 0x8a, 0x10, 0x25, 0xa8, 0x7f, 0x7d, 0x6c, 0xcf, 0x24,
	0xc2, 0xd7, 0x4a, 0x61, 0x18, 0x67, 0x86, 0x85, 0x3b, 0x09, 0xea, 0xdf, 0x1c, 0x5f, 0x7d, 0x93,
	0x07, 0xb8, 0xcd, 0x95, 0x3e, 0x95, 0x3c, 0xdc, 0x4d, 0x50, 0xa3, 0xbf, 0x7b, 0x5c, 0xfa, 0x14,
	0x72, 0x36, 0x1d, 0x3e, 0x7b, 0x31, 0x1a, 0xfa, 0xfe, 0x7b, 0x5c, 0xe9, 0x11, 0x27, 0x8f, 0x70,
	0x27, 0x9f, 0x30, 0xa5, 0xc4, 0x34, 0x6c, 0x59, 0x65, 0x77, 0xab, 0xf2, 0xb1, 0xe3, 0xac, 0x67,
	0xf7, 0x12, 0x3f, 0x7b, 0x8a, 0xc9, 0x86, 0x2b, 0xde, 0xab, 0x6d, 0x4f, 0xf0, 0xfc, 0x97, 0x0d,
	0x73, 0xaf, 0x4c, 0x7c, 0x88, 0xdb, 0xce, 0x13, 0x2b, 0xf9, 0x1f, 0x0f, 0x3d, 0xdf, 0x95, 0x3d,
	0x7a, 0x8f, 0xf7, 0x6c, 0x59, 0xb2, 0xc0, 0x1d, 0x1f, 0x10, 0xb9, 0xfb, 0x77, 0x8d, 0x2d, 0xa9,
	0x46, 0xf7, 0xfe, 0x4d, 0x72, 0xe3, 0xf5, 0x92, 0x0f, 0xdf, 0x7e, 0x7d, 0xde, 0x89, 0x48, 0x48,
	0x65, 0x96, 0x9f, 0xd6, 0x7b, 0xb3, 0x38, 0xcc, 0x84, 0x61, 0x87, 0xd4, 0x27, 0x79, 0x92, 0x5d,
	0x2c, 0x63, 0x74, 0xb9, 0x8c, 0xd1, 0xcf, 0x65, 0x8c, 0x3e, 0xad, 0xe2, 0xe0, 0x72, 0x15, 0x07,
	0xdf, 0x57, 0x71, 0xf0, 0xfa, 0x49, 0x21, 0xcd, 0x64, 0x9e, 0xd5, 0x96, 0xd2, 0x3a, 0xaf, 0x7c,
	0xc2, 0xa4, 0x9a, 0xb2, 0x8c, 0xe6, 0xa0, 0x4b, 0xd0, 0x03, 0xcd, 0xdf, 0x0e, 0xa4, 0x32, 0xa2,
	0xb2, 0xc0, 0xa0, 0x2e, 0xfe, 0xae, 0x6e, 0x33, 0xd8, 0xf8, 0x01, 0xec, 0x7a, 0x66, 0x6d, 0xbb,
	0x9f, 0xf7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x96, 0x8f, 0xd1, 0xce, 0x1f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DenomTrace queries a denomination trace information.
	Domains(ctx context.Context, in *QueryDomainsRequest, opts ...grpc.CallOption) (*QueryDomainsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Domains(ctx context.Context, in *QueryDomainsRequest, opts ...grpc.CallOption) (*QueryDomainsResponse, error) {
	out := new(QueryDomainsResponse)
	err := c.cc.Invoke(ctx, "/ibc.dns.server.Query/Domains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DenomTrace queries a denomination trace information.
	Domains(context.Context, *QueryDomainsRequest) (*QueryDomainsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Domains(ctx context.Context, req *QueryDomainsRequest) (*QueryDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Domains not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Domains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Domains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibc.dns.server.Query/Domains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Domains(ctx, req.(*QueryDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.dns.server.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Domains",
			Handler:    _Query_Domains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/dns/server/querier.proto",
}

func (m *QueryDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DomainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.DnsId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuerier(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	return n
}

func (m *DomainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	l = m.DnsId.Size()
	n += 1 + l + sovQuerier(uint64(l))
	l = m.Channel.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, DomainInfo{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DnsId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
