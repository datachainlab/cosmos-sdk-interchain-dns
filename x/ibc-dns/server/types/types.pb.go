// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/dns/server/types.proto

package types

import (
	fmt "fmt"
	types "github.com/datachainlab/cosmos-sdk-interchain-dns/x/ibc-dns/common/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterDomainPacketData struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Metadata   []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RegisterDomainPacketData) Reset()         { *m = RegisterDomainPacketData{} }
func (m *RegisterDomainPacketData) String() string { return proto.CompactTextString(m) }
func (*RegisterDomainPacketData) ProtoMessage()    {}
func (*RegisterDomainPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{0}
}
func (m *RegisterDomainPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDomainPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDomainPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDomainPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDomainPacketData.Merge(m, src)
}
func (m *RegisterDomainPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDomainPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDomainPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDomainPacketData proto.InternalMessageInfo

type RegisterDomainPacketAcknowledgement struct {
	Status     uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	DomainName string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *RegisterDomainPacketAcknowledgement) Reset()         { *m = RegisterDomainPacketAcknowledgement{} }
func (m *RegisterDomainPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*RegisterDomainPacketAcknowledgement) ProtoMessage()    {}
func (*RegisterDomainPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{1}
}
func (m *RegisterDomainPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDomainPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDomainPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDomainPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDomainPacketAcknowledgement.Merge(m, src)
}
func (m *RegisterDomainPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDomainPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDomainPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDomainPacketAcknowledgement proto.InternalMessageInfo

type DomainAssociationCreatePacketData struct {
	SrcClient types.ClientDomain `protobuf:"bytes,1,opt,name=src_client,json=srcClient,proto3" json:"src_client"`
	DstClient types.ClientDomain `protobuf:"bytes,2,opt,name=dst_client,json=dstClient,proto3" json:"dst_client"`
}

func (m *DomainAssociationCreatePacketData) Reset()         { *m = DomainAssociationCreatePacketData{} }
func (m *DomainAssociationCreatePacketData) String() string { return proto.CompactTextString(m) }
func (*DomainAssociationCreatePacketData) ProtoMessage()    {}
func (*DomainAssociationCreatePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{2}
}
func (m *DomainAssociationCreatePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAssociationCreatePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAssociationCreatePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAssociationCreatePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAssociationCreatePacketData.Merge(m, src)
}
func (m *DomainAssociationCreatePacketData) XXX_Size() int {
	return m.Size()
}
func (m *DomainAssociationCreatePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAssociationCreatePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAssociationCreatePacketData proto.InternalMessageInfo

type DomainAssociationCreatePacketAcknowledgement struct {
	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *DomainAssociationCreatePacketAcknowledgement) Reset() {
	*m = DomainAssociationCreatePacketAcknowledgement{}
}
func (m *DomainAssociationCreatePacketAcknowledgement) String() string {
	return proto.CompactTextString(m)
}
func (*DomainAssociationCreatePacketAcknowledgement) ProtoMessage() {}
func (*DomainAssociationCreatePacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{3}
}
func (m *DomainAssociationCreatePacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAssociationCreatePacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAssociationCreatePacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAssociationCreatePacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAssociationCreatePacketAcknowledgement.Merge(m, src)
}
func (m *DomainAssociationCreatePacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *DomainAssociationCreatePacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAssociationCreatePacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAssociationCreatePacketAcknowledgement proto.InternalMessageInfo

type DomainAssociationResultPacketData struct {
	Status             uint32            `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	CounterpartyDomain types.LocalDomain `protobuf:"bytes,2,opt,name=counterparty_domain,json=counterpartyDomain,proto3" json:"counterparty_domain"`
	ClientId           string            `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *DomainAssociationResultPacketData) Reset()         { *m = DomainAssociationResultPacketData{} }
func (m *DomainAssociationResultPacketData) String() string { return proto.CompactTextString(m) }
func (*DomainAssociationResultPacketData) ProtoMessage()    {}
func (*DomainAssociationResultPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{4}
}
func (m *DomainAssociationResultPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAssociationResultPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAssociationResultPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAssociationResultPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAssociationResultPacketData.Merge(m, src)
}
func (m *DomainAssociationResultPacketData) XXX_Size() int {
	return m.Size()
}
func (m *DomainAssociationResultPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAssociationResultPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAssociationResultPacketData proto.InternalMessageInfo

type DomainAssociationResultPacketAcknowledgement struct {
}

func (m *DomainAssociationResultPacketAcknowledgement) Reset() {
	*m = DomainAssociationResultPacketAcknowledgement{}
}
func (m *DomainAssociationResultPacketAcknowledgement) String() string {
	return proto.CompactTextString(m)
}
func (*DomainAssociationResultPacketAcknowledgement) ProtoMessage() {}
func (*DomainAssociationResultPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{5}
}
func (m *DomainAssociationResultPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAssociationResultPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAssociationResultPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAssociationResultPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAssociationResultPacketAcknowledgement.Merge(m, src)
}
func (m *DomainAssociationResultPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *DomainAssociationResultPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAssociationResultPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAssociationResultPacketAcknowledgement proto.InternalMessageInfo

type DomainChannelInfo struct {
	Channel  types.LocalChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel"`
	Metadata []byte             `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *DomainChannelInfo) Reset()         { *m = DomainChannelInfo{} }
func (m *DomainChannelInfo) String() string { return proto.CompactTextString(m) }
func (*DomainChannelInfo) ProtoMessage()    {}
func (*DomainChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed97b1dc64ec9181, []int{6}
}
func (m *DomainChannelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainChannelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainChannelInfo.Merge(m, src)
}
func (m *DomainChannelInfo) XXX_Size() int {
	return m.Size()
}
func (m *DomainChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DomainChannelInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterDomainPacketData)(nil), "ibc.dns.server.RegisterDomainPacketData")
	proto.RegisterType((*RegisterDomainPacketAcknowledgement)(nil), "ibc.dns.server.RegisterDomainPacketAcknowledgement")
	proto.RegisterType((*DomainAssociationCreatePacketData)(nil), "ibc.dns.server.DomainAssociationCreatePacketData")
	proto.RegisterType((*DomainAssociationCreatePacketAcknowledgement)(nil), "ibc.dns.server.DomainAssociationCreatePacketAcknowledgement")
	proto.RegisterType((*DomainAssociationResultPacketData)(nil), "ibc.dns.server.DomainAssociationResultPacketData")
	proto.RegisterType((*DomainAssociationResultPacketAcknowledgement)(nil), "ibc.dns.server.DomainAssociationResultPacketAcknowledgement")
	proto.RegisterType((*DomainChannelInfo)(nil), "ibc.dns.server.DomainChannelInfo")
}

func init() { proto.RegisterFile("ibc/dns/server/types.proto", fileDescriptor_ed97b1dc64ec9181) }

var fileDescriptor_ed97b1dc64ec9181 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x4e,
	0x10, 0xc6, 0xed, 0xb4, 0xea, 0xbf, 0xd9, 0xfe, 0x41, 0x60, 0x10, 0x8a, 0x52, 0xe4, 0x94, 0x72,
	0xe9, 0x81, 0xd8, 0x12, 0x70, 0x42, 0x5c, 0xd2, 0xf4, 0x40, 0x25, 0x84, 0x90, 0x8f, 0x48, 0x10,
	0xad, 0x77, 0x07, 0x67, 0x15, 0x7b, 0x37, 0xf2, 0x4c, 0x80, 0xbe, 0x01, 0x47, 0x1e, 0x81, 0x37,
	0x40, 0xe2, 0x29, 0x7a, 0xec, 0x91, 0x13, 0x42, 0xc9, 0x8b, 0x20, 0x7b, 0x37, 0x95, 0xb1, 0x52,
	0xe8, 0x6d, 0x77, 0x26, 0xdf, 0x37, 0xdf, 0xfc, 0xe2, 0x65, 0x7d, 0x95, 0x8a, 0x58, 0x6a, 0x8c,
	0x11, 0xca, 0x0f, 0x50, 0xc6, 0x74, 0x36, 0x07, 0x8c, 0xe6, 0xa5, 0x21, 0x13, 0xdc, 0x54, 0xa9,
	0x88, 0xa4, 0xc6, 0xc8, 0xf6, 0xfa, 0x77, 0x33, 0x93, 0x99, 0xba, 0x15, 0x57, 0x27, 0xfb, 0xab,
	0xfe, 0xa5, 0x83, 0x30, 0x45, 0x61, 0x74, 0xd3, 0xe1, 0xf0, 0x2d, 0xeb, 0x25, 0x90, 0x29, 0x24,
	0x28, 0x4f, 0x4c, 0xc1, 0x95, 0x7e, 0xcd, 0xc5, 0x0c, 0xe8, 0x84, 0x13, 0x0f, 0x06, 0x6c, 0x4f,
	0xd6, 0xb5, 0x89, 0xe6, 0x05, 0xf4, 0xfc, 0x03, 0xff, 0xa8, 0x9b, 0x30, 0x5b, 0x7a, 0xc5, 0x0b,
	0x08, 0xfa, 0x6c, 0xb7, 0x00, 0xe2, 0x92, 0x13, 0xef, 0x75, 0x0e, 0xfc, 0xa3, 0xff, 0x93, 0xcb,
	0xfb, 0xb3, 0xed, 0xcf, 0x5f, 0x07, 0xde, 0xa1, 0x64, 0x0f, 0x37, 0xd9, 0x8f, 0xc4, 0x4c, 0x9b,
	0x8f, 0x39, 0xc8, 0x0c, 0x0a, 0xd0, 0x14, 0xdc, 0x63, 0x3b, 0x48, 0x9c, 0x16, 0x58, 0x0f, 0xb9,
	0x91, 0xb8, 0x5b, 0x3b, 0x41, 0xa7, 0x9d, 0xc0, 0x4d, 0xf9, 0xe6, 0xb3, 0x07, 0xd6, 0x7e, 0x84,
	0x68, 0x84, 0xe2, 0xa4, 0x8c, 0x1e, 0x97, 0xc0, 0x09, 0x1a, 0xeb, 0x8c, 0x18, 0xc3, 0x52, 0x4c,
	0x44, 0xae, 0x40, 0x53, 0x3d, 0x68, 0xef, 0xf1, 0xfd, 0x68, 0x4d, 0xd0, 0xb2, 0x89, 0xc6, 0x75,
	0xd7, 0x9a, 0x1d, 0x6f, 0x9f, 0xff, 0x1c, 0x78, 0x49, 0x17, 0x4b, 0x61, 0xcb, 0x95, 0x85, 0x44,
	0x5a, 0x5b, 0x74, 0xae, 0x6f, 0x21, 0x91, 0x6c, 0xd9, 0x25, 0x7e, 0xc7, 0x1e, 0xfd, 0x35, 0xf0,
	0x75, 0x01, 0xdd, 0x62, 0x5b, 0x05, 0x66, 0x0e, 0x4c, 0x75, 0x74, 0xfe, 0xdf, 0x37, 0x11, 0x49,
	0x00, 0x17, 0x39, 0x35, 0x88, 0x5c, 0xe5, 0x9a, 0xb0, 0x3b, 0xc2, 0x2c, 0x34, 0x41, 0x39, 0xe7,
	0x25, 0x9d, 0x4d, 0x2c, 0x70, 0xb7, 0xef, 0x7e, 0x7b, 0xdf, 0x97, 0x46, 0xf0, 0xfc, 0x8f, 0x75,
	0x83, 0xa6, 0xda, 0x76, 0x82, 0x7d, 0xd6, 0xb5, 0xd8, 0x26, 0x4a, 0xf6, 0xb6, 0xea, 0xbc, 0xbb,
	0xb6, 0x70, 0x2a, 0x5d, 0xe8, 0xa7, 0x1b, 0xa0, 0x34, 0x33, 0xb7, 0xa0, 0x38, 0x15, 0xb2, 0xdb,
	0x56, 0x35, 0x9e, 0x72, 0xad, 0x21, 0x3f, 0xd5, 0xef, 0x4d, 0xf0, 0x9c, 0xfd, 0x27, 0xec, 0xf5,
	0xaa, 0x3f, 0xba, 0x4e, 0xed, 0x24, 0x2e, 0xf6, 0x5a, 0xf2, 0xef, 0xef, 0xfa, 0x38, 0x3d, 0x5f,
	0x86, 0xfe, 0xc5, 0x32, 0xf4, 0x7f, 0x2d, 0x43, 0xff, 0xcb, 0x2a, 0xf4, 0x2e, 0x56, 0xa1, 0xf7,
	0x63, 0x15, 0x7a, 0x6f, 0x5e, 0x64, 0x8a, 0xa6, 0x8b, 0xb4, 0x1a, 0x13, 0x57, 0x02, 0x31, 0xe5,
	0x4a, 0xe7, 0x3c, 0x8d, 0x85, 0xc1, 0xc2, 0xe0, 0x10, 0xe5, 0x6c, 0xa8, 0x2a, 0x38, 0x75, 0x63,
	0x58, 0x3d, 0xcb, 0x4f, 0xb1, 0x4a, 0xc5, 0xb0, 0xfd, 0xc4, 0xd3, 0x9d, 0xfa, 0x85, 0x3e, 0xf9,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x10, 0xcd, 0xf1, 0x01, 0x04, 0x00, 0x00,
}

func (m *RegisterDomainPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDomainPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDomainPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterDomainPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDomainPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDomainPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DomainAssociationCreatePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAssociationCreatePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAssociationCreatePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DstClient.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SrcClient.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DomainAssociationCreatePacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAssociationCreatePacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAssociationCreatePacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DomainAssociationResultPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAssociationResultPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAssociationResultPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CounterpartyDomain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DomainAssociationResultPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAssociationResultPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAssociationResultPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DomainChannelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainChannelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainChannelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterDomainPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RegisterDomainPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainAssociationCreatePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SrcClient.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DstClient.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *DomainAssociationCreatePacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainAssociationResultPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = m.CounterpartyDomain.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DomainAssociationResultPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DomainChannelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Channel.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterDomainPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDomainPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDomainPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDomainPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDomainPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDomainPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAssociationCreatePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAssociationCreatePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAssociationCreatePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SrcClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DstClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAssociationCreatePacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAssociationCreatePacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAssociationCreatePacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAssociationResultPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAssociationResultPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAssociationResultPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CounterpartyDomain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAssociationResultPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAssociationResultPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAssociationResultPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainChannelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainChannelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainChannelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
